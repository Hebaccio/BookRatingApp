// <auto-generated />
using System;
using Bookies.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookies.Repository.Migrations
{
    [DbContext(typeof(BookiesContext))]
    partial class BookiesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bookies.Core.BasicClasses.Genre", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreID"));

                    b.Property<string>("GenreDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreID");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Bookies.Core.BasicClasses.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Bookies.Core.BasicClasses.SocialMedia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMediaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SocialMedia");
                });

            modelBuilder.Entity("Bookies.Core.BasicClasses.Tag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagID"));

                    b.Property<string>("TagDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagID");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Bookies.Core.BookClasses.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"));

                    b.Property<string>("BookStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookID");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Bookies.Core.BookClasses.BookCharacter", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("CharacterID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "CharacterID");

                    b.HasIndex("CharacterID");

                    b.ToTable("BookCharacter");
                });

            modelBuilder.Entity("Bookies.Core.BookClasses.BookGenre", b =>
                {
                    b.Property<int>("GenreID")
                        .HasColumnType("int");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.HasKey("GenreID", "BookID");

                    b.HasIndex("BookID");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("Bookies.Core.BookClasses.BookStaff", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "PersonID", "RoleID");

                    b.HasIndex("PersonID");

                    b.HasIndex("RoleID");

                    b.ToTable("BookStaff");
                });

            modelBuilder.Entity("Bookies.Core.BookClasses.BookTag", b =>
                {
                    b.Property<int>("TagID")
                        .HasColumnType("int");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.HasKey("TagID", "BookID");

                    b.HasIndex("BookID");

                    b.ToTable("BookTag");
                });

            modelBuilder.Entity("Bookies.Core.BookClasses.Character", b =>
                {
                    b.Property<int>("CharacterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterID"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterID");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("Bookies.Core.BookClasses.RelatedBooks", b =>
                {
                    b.Property<int>("Book1_ID")
                        .HasColumnType("int");

                    b.Property<int>("Book2_ID")
                        .HasColumnType("int");

                    b.Property<int>("RelationID")
                        .HasColumnType("int");

                    b.HasKey("Book1_ID", "Book2_ID", "RelationID");

                    b.HasIndex("Book2_ID");

                    b.HasIndex("RelationID");

                    b.ToTable("RelatedBooks");
                });

            modelBuilder.Entity("Bookies.Core.BookClasses.Relation", b =>
                {
                    b.Property<int>("RelationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelationID"));

                    b.Property<string>("RelationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelationOrder")
                        .HasColumnType("int");

                    b.HasKey("RelationID");

                    b.ToTable("Relation");
                });

            modelBuilder.Entity("Bookies.Core.PersonClasses.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Bookies.Core.PersonClasses.PersonSocial", b =>
                {
                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("SocialMediaID")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonID", "SocialMediaID", "Count");

                    b.HasIndex("SocialMediaID");

                    b.ToTable("PersonSocial");
                });

            modelBuilder.Entity("Bookies.Core.UnusedClasses.BookSeries", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("SeriesID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "SeriesID");

                    b.HasIndex("SeriesID");

                    b.ToTable("BookSeries");
                });

            modelBuilder.Entity("Bookies.Core.UnusedClasses.FictionalUniverse", b =>
                {
                    b.Property<int>("UniverseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniverseID"));

                    b.Property<string>("UniverseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniverseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniverseNotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniverseID");

                    b.ToTable("FictionalUniverse");
                });

            modelBuilder.Entity("Bookies.Core.UnusedClasses.Series", b =>
                {
                    b.Property<int>("SeriesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriesID"));

                    b.Property<int?>("FictionalUniverseID")
                        .HasColumnType("int");

                    b.Property<string>("SeriesDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriesNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniverseID")
                        .HasColumnType("int");

                    b.HasKey("SeriesID");

                    b.HasIndex("FictionalUniverseID");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Bookies.Core.BookClasses.BookCharacter", b =>
                {
                    b.HasOne("Bookies.Core.BookClasses.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookies.Core.BookClasses.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Bookies.Core.BookClasses.BookGenre", b =>
                {
                    b.HasOne("Bookies.Core.BookClasses.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookies.Core.BasicClasses.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Bookies.Core.BookClasses.BookStaff", b =>
                {
                    b.HasOne("Bookies.Core.BookClasses.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookies.Core.PersonClasses.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookies.Core.BasicClasses.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Bookies.Core.BookClasses.BookTag", b =>
                {
                    b.HasOne("Bookies.Core.BookClasses.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookies.Core.BasicClasses.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Bookies.Core.BookClasses.RelatedBooks", b =>
                {
                    b.HasOne("Bookies.Core.BookClasses.Book", "Book1")
                        .WithMany()
                        .HasForeignKey("Book1_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookies.Core.BookClasses.Book", "Book2")
                        .WithMany()
                        .HasForeignKey("Book2_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookies.Core.BookClasses.Relation", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book1");

                    b.Navigation("Book2");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("Bookies.Core.PersonClasses.PersonSocial", b =>
                {
                    b.HasOne("Bookies.Core.PersonClasses.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookies.Core.BasicClasses.SocialMedia", "SocialMedia")
                        .WithMany()
                        .HasForeignKey("SocialMediaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SocialMedia");
                });

            modelBuilder.Entity("Bookies.Core.UnusedClasses.BookSeries", b =>
                {
                    b.HasOne("Bookies.Core.BookClasses.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookies.Core.UnusedClasses.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Bookies.Core.UnusedClasses.Series", b =>
                {
                    b.HasOne("Bookies.Core.UnusedClasses.FictionalUniverse", "Universe")
                        .WithMany()
                        .HasForeignKey("FictionalUniverseID");

                    b.Navigation("Universe");
                });
#pragma warning restore 612, 618
        }
    }
}
